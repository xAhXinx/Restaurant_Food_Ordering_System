'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Order")>  _
Partial Public Class OrderDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertMenuItem(instance As MenuItem)
    End Sub
  Partial Private Sub UpdateMenuItem(instance As MenuItem)
    End Sub
  Partial Private Sub DeleteMenuItem(instance As MenuItem)
    End Sub
  Partial Private Sub InsertTable(instance As Table)
    End Sub
  Partial Private Sub UpdateTable(instance As Table)
    End Sub
  Partial Private Sub DeleteTable(instance As Table)
    End Sub
  Partial Private Sub InsertOrder(instance As [Order])
    End Sub
  Partial Private Sub UpdateOrder(instance As [Order])
    End Sub
  Partial Private Sub DeleteOrder(instance As [Order])
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.Restaurant_Food_Ordering_System.My.MySettings.Default.OrderConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property MenuItems() As System.Data.Linq.Table(Of MenuItem)
		Get
			Return Me.GetTable(Of MenuItem)
		End Get
	End Property
	
	Public ReadOnly Property Tables() As System.Data.Linq.Table(Of Table)
		Get
			Return Me.GetTable(Of Table)
		End Get
	End Property
	
	Public ReadOnly Property Orders() As System.Data.Linq.Table(Of [Order])
		Get
			Return Me.GetTable(Of [Order])
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MenuItem")>  _
Partial Public Class MenuItem
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MenuItemID As String
	
	Private _title As String
	
	Private _description As String
	
	Private _price As Single
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMenuItemIDChanging(value As String)
    End Sub
    Partial Private Sub OnMenuItemIDChanged()
    End Sub
    Partial Private Sub OntitleChanging(value As String)
    End Sub
    Partial Private Sub OntitleChanged()
    End Sub
    Partial Private Sub OndescriptionChanging(value As String)
    End Sub
    Partial Private Sub OndescriptionChanged()
    End Sub
    Partial Private Sub OnpriceChanging(value As Single)
    End Sub
    Partial Private Sub OnpriceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MenuItemID", DbType:="VarChar(6) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property MenuItemID() As String
		Get
			Return Me._MenuItemID
		End Get
		Set
			If (String.Equals(Me._MenuItemID, value) = false) Then
				Me.OnMenuItemIDChanging(value)
				Me.SendPropertyChanging
				Me._MenuItemID = value
				Me.SendPropertyChanged("MenuItemID")
				Me.OnMenuItemIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_title", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property title() As String
		Get
			Return Me._title
		End Get
		Set
			If (String.Equals(Me._title, value) = false) Then
				Me.OntitleChanging(value)
				Me.SendPropertyChanging
				Me._title = value
				Me.SendPropertyChanged("title")
				Me.OntitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_description", DbType:="VarChar(40)")>  _
	Public Property description() As String
		Get
			Return Me._description
		End Get
		Set
			If (String.Equals(Me._description, value) = false) Then
				Me.OndescriptionChanging(value)
				Me.SendPropertyChanging
				Me._description = value
				Me.SendPropertyChanged("description")
				Me.OndescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_price", DbType:="Real NOT NULL")>  _
	Public Property price() As Single
		Get
			Return Me._price
		End Get
		Set
			If ((Me._price = value)  _
						= false) Then
				Me.OnpriceChanging(value)
				Me.SendPropertyChanging
				Me._price = value
				Me.SendPropertyChanged("price")
				Me.OnpriceChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Table")>  _
Partial Public Class Table
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TableID As Integer
	
	Private _Status As String
	
	Private _Orders As EntitySet(Of [Order])
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTableIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTableIDChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Orders = New EntitySet(Of [Order])(AddressOf Me.attach_Orders, AddressOf Me.detach_Orders)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TableID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property TableID() As Integer
		Get
			Return Me._TableID
		End Get
		Set
			If ((Me._TableID = value)  _
						= false) Then
				Me.OnTableIDChanging(value)
				Me.SendPropertyChanging
				Me._TableID = value
				Me.SendPropertyChanged("TableID")
				Me.OnTableIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(4)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Table_Order", Storage:="_Orders", ThisKey:="TableID", OtherKey:="TableID")>  _
	Public Property Orders() As EntitySet(Of [Order])
		Get
			Return Me._Orders
		End Get
		Set
			Me._Orders.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Orders(ByVal entity As [Order])
		Me.SendPropertyChanging
		entity.Table = Me
	End Sub
	
	Private Sub detach_Orders(ByVal entity As [Order])
		Me.SendPropertyChanging
		entity.Table = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[Order]")>  _
Partial Public Class [Order]
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _OrderID As String
	
	Private _TableID As Integer
	
	Private _status As String
	
	Private _voucherID As System.Nullable(Of Integer)
	
	Private _totalPayment As Single
	
	Private _tax As Single
	
	Private _grandTotal As System.Nullable(Of Single)
	
	Private _Tables As EntityRef(Of Table)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnOrderIDChanging(value As String)
    End Sub
    Partial Private Sub OnOrderIDChanged()
    End Sub
    Partial Private Sub OnTableIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTableIDChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As String)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub OnvoucherIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnvoucherIDChanged()
    End Sub
    Partial Private Sub OntotalPaymentChanging(value As Single)
    End Sub
    Partial Private Sub OntotalPaymentChanged()
    End Sub
    Partial Private Sub OntaxChanging(value As Single)
    End Sub
    Partial Private Sub OntaxChanged()
    End Sub
    Partial Private Sub OngrandTotalChanging(value As System.Nullable(Of Single))
    End Sub
    Partial Private Sub OngrandTotalChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Tables = CType(Nothing, EntityRef(Of Table))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderID", DbType:="VarChar(6) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property OrderID() As String
		Get
			Return Me._OrderID
		End Get
		Set
			If (String.Equals(Me._OrderID, value) = false) Then
				Me.OnOrderIDChanging(value)
				Me.SendPropertyChanging
				Me._OrderID = value
				Me.SendPropertyChanged("OrderID")
				Me.OnOrderIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TableID", DbType:="Int NOT NULL")>  _
	Public Property TableID() As Integer
		Get
			Return Me._TableID
		End Get
		Set
			If ((Me._TableID = value)  _
						= false) Then
				If Me._Tables.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTableIDChanging(value)
				Me.SendPropertyChanging
				Me._TableID = value
				Me.SendPropertyChanged("TableID")
				Me.OnTableIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(7) NOT NULL", CanBeNull:=false)>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_voucherID", DbType:="Int")>  _
	Public Property voucherID() As System.Nullable(Of Integer)
		Get
			Return Me._voucherID
		End Get
		Set
			If (Me._voucherID.Equals(value) = false) Then
				Me.OnvoucherIDChanging(value)
				Me.SendPropertyChanging
				Me._voucherID = value
				Me.SendPropertyChanged("voucherID")
				Me.OnvoucherIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_totalPayment", DbType:="Real NOT NULL")>  _
	Public Property totalPayment() As Single
		Get
			Return Me._totalPayment
		End Get
		Set
			If ((Me._totalPayment = value)  _
						= false) Then
				Me.OntotalPaymentChanging(value)
				Me.SendPropertyChanging
				Me._totalPayment = value
				Me.SendPropertyChanged("totalPayment")
				Me.OntotalPaymentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_tax", DbType:="Real NOT NULL")>  _
	Public Property tax() As Single
		Get
			Return Me._tax
		End Get
		Set
			If ((Me._tax = value)  _
						= false) Then
				Me.OntaxChanging(value)
				Me.SendPropertyChanging
				Me._tax = value
				Me.SendPropertyChanged("tax")
				Me.OntaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_grandTotal", DbType:="Real")>  _
	Public Property grandTotal() As System.Nullable(Of Single)
		Get
			Return Me._grandTotal
		End Get
		Set
			If (Me._grandTotal.Equals(value) = false) Then
				Me.OngrandTotalChanging(value)
				Me.SendPropertyChanging
				Me._grandTotal = value
				Me.SendPropertyChanged("grandTotal")
				Me.OngrandTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Table_Order", Storage:="_Tables", ThisKey:="TableID", OtherKey:="TableID", IsForeignKey:=true)>  _
	Public Property Table() As Table
		Get
			Return Me._Tables.Entity
		End Get
		Set
			Dim previousValue As Table = Me._Tables.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Tables.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Tables.Entity = Nothing
					previousValue.Orders.Remove(Me)
				End If
				Me._Tables.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Orders.Add(Me)
					Me._TableID = value.TableID
				Else
					Me._TableID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Table")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
